//#include <iostream>
//#include <string>
//#include <vector>
//using namespace std;
//int binarySearch(int myarray[], int beg, int end, int key)
//{
//    int mid;
//    if (end >= beg) {
//        mid = (beg + end) / 2;
//        if (myarray[mid] == key)
//        {
//            return mid + 1;
//        }
//        else if (myarray[mid] < key) {
//            return binarySearch(myarray, mid + 1, end, key);
//        }
//        else {
//            return binarySearch(myarray, beg, mid - 1, key);
//        }
//    }
//    return -1;
//}
//int main()
//{
//    int myarray[10] = { 3, 4, 5, 6, 7, 8, 10, 11, 13, 56 };
//    vector<string>name{"A", "b", "c", "d", "e", "f", "g", "h", "k", "j"};
//    int key, location = -1;
//    cout << "The input array is" << endl;
//    for (int i = 0; i < 10; i++) {
//        cout << myarray[i] << " ";
//    }
//    cout << endl;
//    cout << "Enter the key that is to be searched:"; cin >> key;
//    location = binarySearch(myarray, 0, 9, key);
//    if (location != -1) {
//        cout << "Key found at location " << location<<" ";
//    }
//    else {
//        cout << "Requested key not found";
//    }
//    cout << name[location - 1];
//}









//#include <iostream>
//#include <string>
//using namespace std;
//int main()
//{
//    int myarray[10] = { 21,43,23,54,75,13,5,8,25,10 };
//    int key, loc;
//    cout << "The input array is" << endl;
//    for (int i = 0; i < 10; i++) {
//        cout << myarray[i] << " ";
//    }
//    cout << endl;
//    cout << "Enter the key to be searched : "; cin >> key;
//    for (int i = 0; i < 10; i++)
//    {
//        if (myarray[i] == key)
//        {
//            loc = i + 1;
//            break;
//        }
//        else
//            loc = 0;
//    }
//    if (loc != 0)
//    {
//        cout << "Key found at position " << loc << " in the array";
//    }
//    else
//    {
//        cout << "Could not find given key in the array";
//    }
//
//}





//#include <iostream>
//#include <string>
//#include <bits/stdc++.h>
//using namespace

/* File Handling with C++ using ifstream & ofstream class object*/
/* To write the Content in File*/
/* Then to read the content of file*/






///* fstream header file for ifstream, ofstream,
//fstream classes */
//#include <fstream>
//
//using namespace std;
//
//// Driver Code
//int main()
//{
//	// Creation of ofstream class object
//	ofstream fout;
//
//	string line;
//
//	// by default ios::out mode, automatically deletes
//	// the content of file. To append the content, open in ios:app
//	// fout.open("sample.txt", ios::app)
//	fout.open("sample.txt");
//
//	// Execute a loop If file successfully opened
//	while (fout) {
//
//		// Read a Line from standard input
//		getline(cin, line);
//
//		// Press -1 to exit
//		if (line == "-1")
//			break;
//
//		// Write line in file
//		fout << line << endl;
//	}
//
//	// Close the File
//	fout.close();
//
//	return 0;
//}
#include <iostream>
#include <string>
#include <fstream>
#include<windows.h>

using namespace std;
int DisplayResourceNAMessageBox()
{
    int msgboxID = MessageBox(
        NULL,
        (LPCWSTR)L"Resource not available\nDo you want to try again?",
        (LPCWSTR)L"Account Details",
        MB_ICONWARNING | MB_CANCELTRYCONTINUE | MB_DEFBUTTON2
    );

    switch (msgboxID)
    {
    case IDCANCEL:
        exit(-1);
        break;
    case IDTRYAGAIN:
        DisplayResourceNAMessageBox();
        break;
    case IDCONTINUE:
        
        break;
    }

    return msgboxID;
}
int main()
{
    string mystring;
    int i = 0;
    ofstream myfile;
    myfile.open("c.txt", ios::app);
    do {
        i++;
        cout << "what do you want to say?" << endl;

        getline(cin, mystring);
        myfile << mystring << endl;
        DisplayResourceNAMessageBox();
    } while (i != 5);
    ifstream myReadFile;

    myReadFile.open("sample.txt");

    char output[100];

    if (myReadFile.is_open()){

        while (!myReadFile.eof()) {
            {

                myReadFile >> output;
                cout << output;
            }
        }
        myReadFile.close();
           
            return 0;

        }
}
